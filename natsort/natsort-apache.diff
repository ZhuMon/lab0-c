Patch to Apache2.0a-dev to add natural-order sorting to autoindexes of
directories.

Apply this patch with 

  $ cd apache-2.0
  $ patch -p4 ~/natsort-apache.diff

--
Martin Pool



diff --recursive -u -N /home/mbp/apache-2.0-orig/src/lib/apr/lib/Makefile.in /home/mbp/apache-2.0/src/lib/apr/lib/Makefile.in
--- /home/mbp/apache-2.0-orig/src/lib/apr/lib/Makefile.in	Mon Dec 20 15:02:30 1999
+++ /home/mbp/apache-2.0/src/lib/apr/lib/Makefile.in	Sat Mar 11 01:50:49 2000
@@ -25,7 +25,8 @@
 	apr_slack.o \
 	apr_snprintf.o \
 	apr_tables.o \
-	apr_getpass.o
+	apr_getpass.o \
+	apr_strnatcmp.o
 
 .c.o:
 	$(CC) $(CFLAGS) -c $(INCLUDES) $<
diff --recursive -u -N /home/mbp/apache-2.0-orig/src/lib/apr/lib/apr_strnatcmp.c /home/mbp/apache-2.0/src/lib/apr/lib/apr_strnatcmp.c
--- /home/mbp/apache-2.0-orig/src/lib/apr/lib/apr_strnatcmp.c	Wed Dec 31 19:00:00 1969
+++ /home/mbp/apache-2.0/src/lib/apr/lib/apr_strnatcmp.c	Sat Mar 11 01:55:07 2000
@@ -0,0 +1,116 @@
+/* -*- mode: c; c-file-style: "k&r" -*-
+
+  strnatcmp.c -- Perform 'natural order' comparisons of strings in C.
+  Copyright (C) 2000 by Martin Pool <mbp@humbug.org.au>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+
+#include <ctype.h>
+#include <string.h>
+#include <assert.h>
+#include <stdio.h>
+
+#include "apr_strnatcmp.h"
+
+#if defined(__GNUC__)
+#  define UNUSED __attribute__((__unused__))
+#endif
+
+static char const *version UNUSED =
+    "strnatcmp.c,v 1.4";
+
+
+static int strnatcmp0(char const *a, char const *b, int fold_case)
+{
+     int ai, bi;
+     char ca, cb;
+     
+     assert(a && b);
+     ai = bi = 0;
+     while (1) {
+	  ca = a[ai]; cb = b[bi];
+
+	  /* skip over leading spaces or zeros */
+	  while (isspace(ca)  ||  ca == '0')
+	       ca = a[++ai];
+
+	  while (isspace(cb)  ||  cb == '0')
+	       cb = b[++bi];
+
+	  /* process run of digits */
+	  if (isdigit(ca)  &&  isdigit(cb)) {
+	       int bias = 0;
+	       /* The longest run of digits (stripping off leading
+		  zeros) wins.  That aside, the greatest value wins,
+		  but we can't know that it will until we've scanned
+		  both numbers to know that they have the same
+		  magnitude, so we remember it in BIAS. */
+	       while (1) {
+		    if (!isdigit(ca)  &&  !isdigit(cb))
+			 goto done_number;
+		    else if (!isdigit(ca))
+			 return -1;
+		    else if (!isdigit(cb))
+			 return +1;
+		    else if (ca < cb) {
+			 if (!bias)
+			      bias = -1;
+		    } else if (ca > cb) {
+			 if (!bias)
+			      bias = +1;
+		    } else if (!ca  &&  !cb)
+			 return bias;
+
+		    ca = a[++ai]; cb = b[++bi];
+	       }
+	  done_number:
+	       if (bias)
+		    return bias;
+	  }
+
+	  if (!ca && !cb) {
+	       /* The strings compare the same.  Perhaps the caller
+                  will want to call strcmp to break the tie. */
+	       return 0;
+	  }
+
+	  if (fold_case) {
+	       ca = toupper(ca);
+	       cb = toupper(cb);
+	  }
+	  
+	  if (ca < cb)
+	       return -1;
+	  else if (ca > cb)
+	       return +1;
+
+	  ++ai; ++bi;
+     }
+}
+
+
+
+int strnatcmp(char const *a, char const *b) {
+     return strnatcmp0(a, b, 0);
+}
+
+
+/* Compare, recognizing numeric string and ignoring case. */
+int strnatcasecmp(char const *a, char const *b) {
+     return strnatcmp0(a, b, 1);
+}

--- /home/mbp/apache-2.0-orig/src/modules/standard/mod_autoindex.c	Thu Mar  9 19:07:11 2000
+++ /home/mbp/apache-2.0/src/modules/standard/mod_autoindex.c	Sat Mar 11 02:55:31 2000
@@ -62,7 +62,9 @@
  * 3/23/93
  * 
  * Adapted to Apache by rst.
- */
+ *
+ * Natural sort ordering added by Martin Pool <mbp@humbug.org.au> in
+ * March 2000.  */
 
 #include "ap_config.h"
 #include "httpd.h"
@@ -74,6 +76,7 @@
 #include "http_main.h"
 #include "util_script.h"
 #include "apr_fnmatch.h"
+#include "apr_strnatcmp.h"
 #ifdef HAVE_STRING_H
 #include <string.h>
 #endif
@@ -99,6 +102,7 @@
 #define SUPPRESS_PREAMBLE 64
 #define SUPPRESS_COLSORT 128
 #define NO_OPTIONS 256
+#define NATURAL_ORDER	512
 
 #define K_PAD 1
 #define K_NOPAD 0
@@ -404,6 +408,9 @@
         else if (!strcasecmp(w, "SuppressColumnSorting")) {
             option = SUPPRESS_COLSORT;
 	}
+        else if (!strcasecmp(w, "NaturalOrder")) {
+            option = NATURAL_ORDER;
+	}
 	else if (!strcasecmp(w, "None")) {
 	    if (action != '\0') {
 		return "Cannot combine '+' or '-' with 'None' keyword";
@@ -684,7 +691,7 @@
     off_t size;
     ap_time_t lm;
     struct ent *next;
-    int ascending;
+    int ascending, natural;
     char key;
 };
 
@@ -1161,6 +1168,7 @@
     p->lm = -1;
     p->key = ap_toupper(keyid);
     p->ascending = (ap_toupper(direction) == D_ASCENDING);
+    p->natural = autoindex_opts & NATURAL_ORDER;
 
     if (autoindex_opts & FANCY_INDEXING) {
         request_rec *rr = ap_sub_req_lookup_file(name, r);
@@ -1478,6 +1486,7 @@
         c1 = *e2;
         c2 = *e1;
     }
+
     switch (c1->key) {
     case K_LAST_MOD:
 	if (c1->lm > c2->lm) {
@@ -1496,13 +1505,19 @@
         }
         break;
     case K_DESC:
-        result = strcmp(c1->desc ? c1->desc : "", c2->desc ? c2->desc : "");
+	if (c1->natural)
+	    result = strnatcmp(c1->desc ? c1->desc : "", c2->desc ? c2->desc : "");
+	else
+	    result = strcmp(c1->desc ? c1->desc : "", c2->desc ? c2->desc : "");
         if (result) {
             return result;
         }
         break;
     }
-    return strcmp(c1->name, c2->name);
+    if (c1->natural)
+	return strnatcmp(c1->name, c2->name);
+    else
+	return strcmp(c1->name, c2->name);
 }
 
 
diff --recursive -u -N /home/mbp/apache-2.0-orig/src/lib/apr/include/apr_strnatcmp.h /home/mbp/apache-2.0/src/lib/apr/include/apr_strnatcmp.h
--- /home/mbp/apache-2.0-orig/src/lib/apr/include/apr_strnatcmp.h	Wed Dec 31 19:00:00 1969
+++ /home/mbp/apache-2.0/src/lib/apr/include/apr_strnatcmp.h	Sat Mar  4 22:05:56 2000
@@ -0,0 +1,24 @@
+/* -*- mode: c; c-file-style: "k&r" -*-
+
+  strnatcmp.c -- Perform 'natural order' comparisons of strings in C.
+  Copyright (C) 2000 by Martin Pool <mbp@humbug.org.au>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+
+int strnatcmp(char const *a, char const *b);
+int strnatcasecmp(char const *a, char const *b);
